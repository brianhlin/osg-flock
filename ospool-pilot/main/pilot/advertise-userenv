#!/bin/bash
#
# This script probes a system for properties useful for OSGVO and
# friends. This particular script runs "inside" Singularity, in
# the same environment as user jobs.
#
# To be able to support both
# integration with GlideinWMS and HTCondor startd cron, argv1 is used
# to determine what mode we are in. If argv1 points to a glidein_config
# file, GlideinWMS mode is assumed. If argv1 is "NONE", HTCondor startd
# cron mode is assumed.
#
# More information:
#    http://www.uscms.org/SoftwareComputing/Grid/WMS/glideinWMS/doc.prd/factory/custom_scripts.html
#    http://research.cs.wisc.edu/htcondor/manual/v8.2/4_4Hooks.html
#
# Example HTCondor startd cron entry:
#
# STARTD_CRON_JOBLIST = $(STARTD_CRON_JOBLIST) osgvo
# STARTD_CRON_osgvo_EXECUTABLE = /opt/osgvo/osgvo-node-advertise
# STARTD_CRON_osgvo_PERIOD = 30m
# STARTD_CRON_osgvo_MODE = periodic
# STARTD_CRON_osgvo_RECONFIG = true
# STARTD_CRON_osgvo_KILL = true
# STARTD_CRON_osgvo_ARGS = NONE

#######################################################################
#
# Configuration
#

#######################################################################


glidein_config="$1"

function info {
    echo "INFO  " $@ 1>&2
}

function my_warn {
    echo "WARN  " $@ 1>&2
}

function advertise {
    # atype is the type of the value as defined by GlideinWMS:
    #   I - integer
    #   S - quoted string
    #   C - unquoted string (i.e. Condor keyword or expression)
    key="$1"
    value="$2"
    atype="$3"

    if [ "$glidein_config" != "NONE" ]; then
        gconfig_add_safe $key "$value"
        add_condor_vars_line $key "$atype" "-" "+" "Y" "Y" "-"
    fi

    if [ "$atype" = "S" ]; then
        echo "$key = \"$value\""
    else
        echo "$key = $value"
    fi
}


#############################################################################
#
# Some tests are too heavy-weight to run every
# 5 minutes. Such test can drop a file named $TEST_FILE_1H.NNNNNNN
# in cwd. These files will be cleaned up after 60 minutes and allow the
# test to rerun then again. There is also a 3 hour version.
#

TEST_FILE_1H=osgvo.test-results.1h
TEST_FILE_4H=osgvo.test-results.4h

# clean up old ones
find . -maxdepth 1 -name $TEST_FILE_1H.\* -mmin +60 -exec rm {} \;
find . -maxdepth 1 -name $TEST_FILE_4H.\* -mmin +240 -exec rm {} \;
find . -maxdepth 1 -name adv-singularity-work.\* -mmin +240 -exec rm -rf {} \;

if [ -e glidein_config ]; then
    # gwms 
    info "GWMS directory detected. Staying in $PWD"
elif [ -e ../glidein_config ]; then
    # gwms stupid tmp dir for periodic scripts - this breaks
    # out ability to cache results
    cd ../
    info "GWMS tmp directory detected. Switched directory to $PWD"
else
    # find a good directory for our tests - we need something that we
    # can re-enter later to pick up cached results
    for DER in $GLIDEIN_Tmp_Dir $TMP $TMPDIR /tmp . ; do
        # do we have write permissions
        if touch $DER/.writetest.$$ >/dev/null 2>&1; then
            rm -f $DER/.writetest.$$
            if mkdir -p $DER/osgvo-node-advertise.work >/dev/null 2>&1; then
                cp $0 $DER/osgvo-node-advertise.work/
                if [ -e add_config_line.source ]; then
                    cp add_config_line.source $DER/osgvo-node-advertise.work/
                fi
                cd $DER/osgvo-node-advertise.work
                info "Switched working directory to $PWD"
                break
            fi
        fi
    done
fi

# bash can set a default PATH - make sure it is exported
export PATH=$PATH

# some sites do not have PATH set
if [ "x$PATH" = "x" ]; then
    export PATH="/usr/local/bin:/usr/bin:/bin"
    my_warn "PATH is empty, setting it to $PATH"
fi
info "PATH is set to $PATH"

# CVMFS_BASE defaults to /cvmfs but can be overridden in case of for example cvmfsexec
if [ "x$CVMFS_BASE" = "x" ]; then
    CVMFS_BASE="/cvmfs"
fi

if [ "x$glidein_config" = "x" ]; then
    glidein_config="$PWD/glidein_config"
    info "No arguments provided - assuming HTCondor startd cron mode"
else
    info "Arguments to the script: $@"
fi

if [ "$glidein_config" != "NONE" ]; then
    # full path is problematic as sometimes we are inside a container - however, looks like
    # the file is always in pwd, so use that
    export add_config_line_source=$PWD/add_config_line.source
    export condor_vars_file=$PWD/main/condor_vars.lst

    info "Sourcing $add_config_line_source"
    source $add_config_line_source
fi

# timeout - need this early as we use it in some commands later
HAS_TIMEOUT="False"
TIMEOUT_CMD=""
if /usr/bin/timeout --version >/dev/null 2>&1; then
    HAS_TIMEOUT="True"
    export TIMEOUT_CMD="/usr/bin/timeout 60"
fi
advertise HAS_TIMEOUT "$HAS_TIMEOUT" "C"

# operating system

# /etc/issue works most of the time, but there are exceptions
OS_NAME=$(cat /etc/issue | head -n1 | awk '{print $1;}' | tr '[:lower:]' '[:upper:]')

if [ "x$OS_NAME" = "xUBUNTU" ]; then
    OS_VERSION=$(cat /etc/issue | head -n1 | grep -o -E ' [0-9]+.[0-9]+')
elif [ -e /etc/debian_version ]; then
    OS_NAME="DEBIAN"
    OS_VERSION=`cat /etc/debian_version`
elif [ "X$OS_NAME" = "xFEDORA" ]; then
    OS_VERSION=`cat /etc/issue | head -n1 | awk '{print $3;}'`
elif [ -e /etc/redhat-release ]; then
    OS_NAME="RHEL"
    OS_VERSION=`cat /etc/redhat-release | grep -o -E ' [0-9]+'`
elif [ -e /etc/rocks-release ]; then
    OS_NAME="RHEL"
    OS_VERSION=`cat /etc/rocks-release | grep -o -E ' [0-9]+.[0-9]+'`
elif [ -e /etc/SuSE-release ]; then
    OS_NAME="SUSE"
    OS_VERSION=`cat /etc/SuSE-release | grep VERSION | grep -o -E ' [0-9]+'`
fi

# remove spaces/tabs in the version
OS_VERSION=`echo $OS_VERSION | sed 's/[ \t]//g'`

# remove / in the version
OS_VERSION=`echo $OS_VERSION | sed 's/\//_/g'`

# we only want major version numbers
OS_VERSION=`echo $OS_VERSION | sed 's/[\.-].*//'`

if [ "x$OS_NAME" = "x" ]; then
    OS_NAME="Unknown"
fi
if [ "x$OS_VERSION" = "x" ]; then
    OS_VERSION="0"
fi

# kernel
OS_KERNEL=`uname -r`
if [ "x$OS_KERNEL" = "x" ]; then
    OS_KERNEL="Unknown"
fi

advertise OSG_OS_NAME "$OS_NAME" "S"
advertise OSG_OS_VERSION "$OS_VERSION" "S"
advertise OSG_OS_STRING "$OS_NAME $OS_VERSION" "S"
advertise OSG_OS_KERNEL "$OS_KERNEL" "S"

# deprecated names
advertise OSGVO_OS_NAME "$OS_NAME" "S"
advertise OSGVO_OS_VERSION "$OS_VERSION" "S"
advertise OSGVO_OS_STRING "$OS_NAME $OS_VERSION" "S"
advertise OSGVO_OS_KERNEL "$OS_KERNEL" "S"

# some cpu flags HTCondor is not yet advertising
for FLAG in `cat /proc/cpuinfo | egrep -i ^flags | head -n 1 | sed -r 's/[a-zA-Z \t]+:[ ]*//'`; do
    if (echo "$FLAG" | egrep "avx512|cx16|f16c") >/dev/null 2>&1; then
        advertise HAS_$FLAG "True" "C"
    fi
done

# if we are in Singularity, override HTCondor's OsSys* vars with the
# default container details
if [ "x$APPTAINER_COMMAND" != "x" -o "x$SINGULARITY_COMMAND" != "x" ]; then
    # RHEL is CentOS in HTCondor
    if [ "x$OS_NAME" = "xRHEL" ]; then
        OS_NAME="CentOS"
    fi
    advertise OpSysLongName "Apptainer Container - $OS_NAME $OS_VERSION" "S"
    advertise OpSysAndVer "${OS_NAME}${OS_VERSION}" "S"
    advertise OpSysName "$OS_NAME" "S"
    advertise OpSysShortName "$OS_NAME" "S"
    advertise OpSysMajorVer "$OS_VERSION" "I"
    advertise OpSysVer "${OS_VERSION}00" "I"
fi

##################
# ulimits

ULIMIT_STACK_SIZE=`(ulimit -s) 2>/dev/null`
if [ "x$ULIMIT_STACK_SIZE" != "x" ]; then
    if [ "X$ULIMIT_STACK_SIZE" = "Xunlimited" ]; then
        ULIMIT_STACK_SIZE=-1
    fi
    advertise ULIMIT_STACK_SIZE "$ULIMIT_STACK_SIZE" "C"
fi

##################
# is the uid mapped to a user? some software is sensitive to this

WHOAMI=$(whoami 2>/dev/null)
MYUNAME=$(id -u -n 2>/dev/null)
MAPPED_USER="True"
if [ "x$WHOAMI" = "x" -o "x$MYUNAME" = "x" ]; then
    MAPPED_USER="False"
fi
advertise MappedUser "$MAPPED_USER" "C"

##################
# Check to see if /home is "minimal". Some sites mounts all of
# /home inside the container, some only mount the current user
# (/home/$USERNAME). The minimal case is important when using
# containers which have software installed under /home

HOME_COUNT=$(ls /home/ 2>/dev/null | wc -l)
MINIMAL_HOME="False"
if [[ $HOME_COUNT -le 1 ]]; then
    MINIMAL_HOME="True"
fi
advertise MinimalHome "$MINIMAL_HOME" "C"


##################
# xrdcp

HAS_XRDCP="False"
if xrdcp --version >/dev/null 2>&1; then
    HAS_XRDCP="True"
fi
advertise HAS_XRDCP "$HAS_XRDCP" "C"


##################
# gcc

HAS_GCC="False"
if gcc --version >/dev/null 2>&1; then
    HAS_GCC="True"
fi
advertise HAS_GCC "$HAS_GCC" "C"

HAS_GPP="False"
if g++ --version >/dev/null 2>&1; then
    HAS_GPP="True"
fi
advertise HAS_GPP "$HAS_GPP" "C"


##################
# R

HAS_R="False"
if R --version >/dev/null 2>&1; then
    HAS_R="True"
    R_VERSION=`(R --version 2>&1 | head -n1 | sed 's/"//g') 2>/dev/null`
    if [ "x$R_VERSION" != "x" ]; then
        advertise R_VERSION "$R_VERSION" "S"
    fi
fi
advertise HAS_R "$HAS_R" "C"


##################
# python/numpy/scipy

info "Checking for Python availability..."
if python --version >/dev/null 2>&1; then
    PYTHON_VERSION=`python --version 2>&1 | sed 's/Python //'`
    if [ "x$PYTHON_VERSION" != "x" ]; then
        advertise PYTHON_VERSION "$PYTHON_VERSION" "S"
    fi
    advertise HAS_PYTHON "True" "C"
fi
if python3 --version >/dev/null 2>&1; then
    PYTHON3_VERSION=`python3 --version 2>&1 | sed 's/Python //'`
    if [ "x$PYTHON3_VERSION" != "x" ]; then
        advertise PYTHON3_VERSION "$PYTHON3_VERSION" "S"
    fi
    advertise HAS_PYTHON3 "True" "C"
fi

info "Checking for numpy/scipy availability..."
cat >py.check <<EOF
from numpy import array
from os.path import exists
from random import seed, shuffle
from scipy.stats import chisquare
from sys import argv
EOF

Has_Numpy_Scipy="False"
if python py.check >/dev/null 2>&1; then
    Has_Numpy_Scipy="True"
elif python3 py.check >/dev/null 2>&1; then
    Has_Numpy_Scipy="True"
fi
advertise HAS_NUMPY "$Has_Numpy_Scipy" "C"
rm -f py.check



